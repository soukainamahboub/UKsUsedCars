1086
1906
1154
72
1139
243
670
1221
383
506
5519
613
3409
860
chrome <- read.table("clipboard",header=TRUE)
chrome
chrome <- read.table("clipboard",header=TRUE)
firefox <- read.table("clipboard",header=TRUE)
length = length(chrome)
length
chrome <- read.table("clipboard",header=TRUE)
chrome <- read.table("clipboard",header=TRUE)
length(chrome)
chrome <- read.table("clipboard",header=TRUE)
length(chrome)
chrome
chrome <- read.table("clipboard",header=TRUE)
length(chrome)
chrome
length(chrome)
Firefox <- read.table("C:/Users/Soukaïna/Download/Firefox.txt", quote=""", comment.char="")
Firefox <- read.table("C:/Users/Soukaïna/Downloads/Firefox.txt", quote=""", comment.char="")
Firefox <- read.table("C:/Users/Soukaina/Downloads/Firefox.txt", quote=""", comment.char="")
q()
firefox <- read.table("C:/Users/Soukaïna/Downloads/Firefox.txt", quote="\"", comment.char="")
View(firefox)
firefox
length(firefox)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# Set the directory
setwd("C:/Users/Soukaïna/Desktop/ADEI/D1")
filepath<-"C:/Users/Soukaïna/Desktop/D1/"
# Load Required Packages: to be increased over the course
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("effects","FactoMineR","car", "factoextra","RColorBrewer","ggplot2","dplyr","ggmap","ggthemes","knitr")
package.check <- lapply(requiredPackages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
# Chunk 3
df1 <- read.table("audi.csv",header=T, sep=",")
df1$manufacturer <- "Audi"
df2 <- read.table("bmw.csv",header=T, sep=",")
df2$manufacturer <- "BMW"
df3 <- read.table("merc.csv",header=T, sep=",")
df3$manufacturer <- "Mercedes"
df4 <- read.table("vw.csv",header=T, sep=",")
df4$manufacturer <- "VW"
#Merging df1, df2, df3 and df4
df <- rbind(df1, df2, df3, df4)
do.call(rbind, df)
head(df)
# Sample 5000 random indices from the number of rows in df
set.seed(07041985)
df <- df[sample(nrow(df), size=5000), ]
# Chunk 4
str(df) # Variable types
dim(df) # Displays the sample size
names(df) # Displays the names of the sample variables
summary(df)
# Chunk 5
# Some useful functions
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
countNA <- function(x) {
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i) }
countX <- function(x,X) {
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i) }
# Chunk 6
mis1<-countNA(df)
imis<-mis1$mis_ind
#mis1$mis_col # Number of missings for the current set of variables
jmis<-mis1$mis_col$mis_x
iouts<-rep(0,nrow(df))  # rows - trips
jouts<-rep(0,ncol(df))  # columns - variables
ierrs<-rep(0,nrow(df))  # rows - trips
jerrs<-rep(0,ncol(df))  # columns - variables
# Chunk 7
df$model<-factor(paste0(df$manufacturer,"-",df$model))
levels(df$model)
# Chunk 8
df$transmission <- factor(df$transmission)
levels( df$transmission )
df$transmission <- factor( df$transmission, levels = c("Manual","Semi-Auto","Automatic"),labels = paste0("f.Trans-",c("Manual","SemiAuto","Automatic")))
# Chunk 9
df$fuelType <- factor( df$fuelType )
# Chunk 10
df$manufacturer <- factor( df$manufacturer )
# Chunk 11
summary(df$model)
barplot(table(df$model), main = "Model Frequencies", xlab = "Model", ylab = "Frequency")
# Chunk 12
#Detecting any missing values as previous barplot cannot show missing values:
na_values <- is.na(df$model)
any(na_values)
# Chunk 13
summary(df$transmission)
barplot(summary(df$transmission),main="Transmission Barplot")
# Chunk 14
summary(df$fuelType)
#Mark NA's as Electric car
na_rows <- which(df$fuelType == 'Other')
#convert variable back to character (to avoid warnings)
df$fuelType <- as.character(df$fuelType)
df$fuelType[na_rows] <- 'Electric'
#convert variable back to factor
df$fuelType <- as.factor(df$fuelType)
# Chunk 15
#Barplot
barplot(summary(df$fuelType),main="FuelType Barplot")
# Chunk 16
summary(df$manufacturer)
barplot(summary(df$manufacturer),main="Manufacturer Barplot")
# Chunk 17
x<-summary(df$year)
# Outlier detection
Boxplot(df$year)
var_out<-calcQ(df$year)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
sel <- which(df$year <= var_out$souti);
iouts[sel]<-iouts[sel]+1
jouts[2]<-jouts[2]+length(sel)
df[sel, "year"] <- NA
sel <- which(df$year >= var_out$souts);
iouts[sel]<-iouts[sel]+1
jouts[2]<-jouts[2]+length(sel)
df[sel, "year"] <- NA
hist(df$year)  #Distribution of "year"
# Chunk 18
summary(df$price)
# Outlier detection
boxplot(df$price)
var_out<-calcQ(df$price)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
sel <- which(df$price <= var_out$souti);
iouts[sel]<-iouts[sel]+1
jouts[3]<-jouts[3]+length(sel)
sel <- which(df$price >= var_out$souts);
iouts[sel]<-iouts[sel]+1
jouts[3]<-jouts[3]+length(sel)
hist(df$price)  #Distribution of "price"
# Chunk 19
summary(df$mileage)
# Outlier detection
Boxplot(df$mileage)
var_out<-calcQ(df$mileage)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
sel <- which(df$mileage >= var_out$souts);
iouts[sel]<-iouts[sel]+1
jouts[5]<-jouts[5]+length(sel)
df[sel, "mileage"] <- NA
sel <- which(df$mileage <= var_out$souti);
iouts[sel]<-iouts[sel]+1
jouts[5]<-jouts[5]+length(sel)
df[sel, "mileage"] <- NA
hist(df$mileage)  #Distribution of "mileage"
# Chunk 20
summary(df$tax)
# Outlier detection
Boxplot(df$tax)
var_out<-calcQ(df$tax)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
sel <- which(df$tax >= var_out$souts);
iouts[sel]<-iouts[sel]+1
jouts[7]<- jouts[7] +length(sel)
df[sel, "tax"] <- NA
sel <- which(df$tax <= var_out$souti);
iouts[sel]<-iouts[sel]+1
jouts[7]<- jouts[7] +length(sel)
df[sel, "tax"] <- NA
hist(df$tax)  #Distribution of "tax"
# Chunk 21
summary(df$mpg)
# Outlier detection
Boxplot(df$mpg)
var_out<-calcQ(df$mpg)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
var_out$souts
var_out$souti
sel <- which(df$mpg >= var_out$souts);
iouts[sel]<-iouts[sel]+1
jouts[8]<- jouts[8] +length(sel)
df[sel, "mpg"] <- NA
sel <- which(df$mpg <= var_out$souti);
iouts[sel]<-iouts[sel]+1
jouts[8]<- jouts[8] +length(sel)
df[sel, "mpg"] <- NA
hist(df$mpg)  #Distribution of "mpg"
# Chunk 22
summary(df$engineSize)
sel <- which(df$engineSize == 0 & (df$model == "Mercedes- C Class" | df$fuelType != "Electric"))
ierrs[sel]<-ierrs[sel]+1
jerrs[9]<-length(sel)
df[sel,"engineSize"]<-NA
# Outlier detection
Boxplot(df$engineSize)
var_out<-calcQ(df$engineSize)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
sel <- which(df$engineSize >= var_out$souts);
iouts[sel]<-iouts[sel]+1
jouts[9]<- jouts[9] +length(sel)
df[sel, "engineSize"] <- NA
sel <- which(df$engineSize <= var_out$souti);
iouts[sel]<-iouts[sel]+1
jouts[9]<- jouts[9] +length(sel)
df[sel, "engineSize"] <- NA
hist(df$engineSize)  #Distribution of "engineSize"
# Chunk 23
labels <- colnames(df[1:10])
# Barplot
barplot(mis1$mis_col$mis_x, names.arg = labels, main = "Missings Per Variable", col = "grey", ylim = c(0, max(mis1$mis_col$mis_x) + 1), las = 2)
# Chunk 24
jerrs
# Barplot
barplot(jerrs[1:10], names.arg = labels,
main = "Barplot with Errors per Variable",
xlab = "Variables", ylab = "Errors",
col = "grey",
ylim = c(0, max(jerrs) + 1),
las = 2)
# Chunk 25
jouts
# Barplot
barplot(jouts[1:10], names.arg = labels,
main = "Barplot with Outliers per Variable",
xlab = "Variables", ylab = "Outliers",
col = "grey",
ylim = c(0, max(jouts) + 1),
las = 2)
# Chunk 26
# Dataframe with the counts
counts_df <- data.frame(
Variable = labels,
Errors = jerrs[1:10],
Missings = jmis[1:10],
Outliers = jouts[1:10]
)
# Sort variables based on counts
sorted_errors <- counts_df[order(-counts_df$Errors), c('Variable', 'Errors')]
sorted_missings <- counts_df[order(-counts_df$Missings), c('Variable', 'Missings')]
sorted_outliers <- counts_df[order(-counts_df$Outliers), c('Variable', 'Outliers')]
# Variables and their respective counts for each category
cat("Variables Sorted by Errors:")
print(sorted_errors)
# Chunk 27
cat("Variables Sorted by Missing Values:")
print(sorted_missings)
# Chunk 28
cat("Variables Sorted by Outliers:")
print(sorted_outliers)
# Chunk 29
table(imis)
barplot(table(imis), main = "Barplot with Missings per Individuals",
xlab = "Number of missings", ylab = "Number of Individuals",
col = "grey",
ylim = c(0,5000))
# Chunk 30
table(ierrs)
barplot(table(ierrs), main = "Barplot with Errors per Individuals",
xlab = "Number of Errors", ylab = "Number of Individuals",
col = "grey",
ylim = c(0,5000))
# Chunk 31
table(iouts)
barplot(table(iouts), main = "Barplot with Outliers per Individuals",
xlab = "Number of Outliers", ylab = "Number of Individuals",
col = "grey",
ylim = c(0,5000))
# Chunk 32
# TOTAL OF INDIVIDUAL MISSINGS, ERRORS, OUTLIERS:
total_missings <- sum(imis); total_errors <- sum(ierrs); total_outliers <- sum(iouts);
total_missings; total_errors; total_outliers;
# Chunk 33
library(mvoutlier)
#Subset of dataframe with numerical values, without rows that have NAs.
df_temp <- na.omit(df)
numerical_df <- df_temp[, sapply(df_temp, is.numeric)]
# Compute Mahalanobis Distance
mahalanobis_dist <- mahalanobis(numerical_df, colMeans(numerical_df), cov(numerical_df))
# Identifying outliers using a threshold
outliers <- numerical_df[mahalanobis_dist > qchisq(0.95, df = 6), ]
# Print the outliers
print("Number of Multivariant Outliers:")
length(outliers)
print("Some Multivariant Outliers:")
head(outliers)
library(mvoutlier)
vout<-aq.plot(outliers, delta=qchisq(0.99, df= 6), alpha=0.01)
# Chunk 34
# dataset with numerical variables and individuals without NA values.
df_temp <- na.omit(df)
numerical_df <- df_temp[, sapply(df_temp, is.numeric)]
numerical_df <- numerical_df[1:6]
head(numerical_df)
# Coorelation matrix
correlation_matrix <- cor(numerical_df)
# Print the correlation matrix
library(corrplot)
corrplot(correlation_matrix)
# Chunk 35
# Rank of variables by correlation with 'price'
correlations_with_price <- correlation_matrix['price', ]
sorted_correlations <- sort(correlations_with_price, decreasing = TRUE)
print("Variables Ranked by Correlation with Price:")
print(sorted_correlations)
# Rank of variables by correlation with 'engineSize'
correlations_with_engineSize <- correlation_matrix['engineSize', ]
sorted_correlations <- sort(correlations_with_engineSize, decreasing = TRUE)
print("Variables Ranked by Correlation with engineSize:")
print(sorted_correlations)
# Rank of variables by correlation with 'tax'
correlations_with_tax <- correlation_matrix['tax', ]
sorted_correlations <- sort(correlations_with_tax, decreasing = TRUE)
print("Variables Ranked by Correlation with tax:")
print(sorted_correlations)
# Rank of variables by correlation with 'mileage'
correlations_with_mileage <- correlation_matrix['mileage', ]
sorted_correlations <- sort(correlations_with_mileage, decreasing = TRUE)
print("Variables Ranked by Correlation with mileage:")
print(sorted_correlations)
# Rank of variables by correlation with 'mpg'
correlations_with_mpg <- correlation_matrix['mpg', ]
sorted_correlations <- sort(correlations_with_mpg, decreasing = TRUE)
print("Variables Ranked by Correlation with MPG:")
print(sorted_correlations)
# Rank of variables by correlation with 'Year'
correlations_with_year <- correlation_matrix['year', ]
sorted_correlations <- sort(correlations_with_year, decreasing = TRUE)
print("Variables Ranked by Correlation with Year:")
print(sorted_correlations)
# Chunk 36
library(missMDA)
# Chunk 37
quantitative_vars<-names(df)[c(2,3,5,7:9)]
summary(df[,quantitative_vars])
res.input<-imputePCA(df[,quantitative_vars],ncp=5)
summary(res.input$completeObs)
df[,"year"] <- res.input$completeObs[,"year"]
df[,"price"] <- res.input$completeObs[,"price"]
df[,"mileage"] <- res.input$completeObs[,"mileage"]
df[,"tax"] <- res.input$completeObs[,"tax"]
df[,"mpg"] <- res.input$completeObs[,"mpg"]
df[,"engineSize"] <- res.input$completeObs[,"engineSize"]
# Chunk 38
categorical_vars<-names(df)[c(1,4,6,10)]
summary(df[,categorical_vars])
#nb <- estim_ncpMCA(df[, categorical_vars],ncp.max=25) #it stabilizes at ncp = 7
res.input<-imputeMCA(df[,categorical_vars],ncp=7)
summary(res.input$completeObs)
df[,"model"] <- res.input$completeObs[,"model"]
df[,"transmission"] <- res.input$completeObs[,"transmission"]
df[,"fuelType"] <- res.input$completeObs[,"fuelType"]
df[,"manufacturer"] <- res.input$completeObs[,"manufacturer"]
# Chunk 39
# f.Year :
table(df$year, useNA="always")
quantile(df$year,seq(0,1,0.25))
min(df$year)
year_labels <- as.character(seq(2008, 2020))
year_breaks <- seq(2007, 2020)
df$f.year <- cut(df$year, breaks = year_breaks, labels = year_labels, include.lowest = TRUE)
summary(df$f.year)
table(df$f.year, useNA="always")
barplot(summary(df$f.year),main="f.year Category Barplot",col = "Grey")
# f.Price:
summary(df$price)
quantile(df$price,seq(0,1,0.25),na.rm=TRUE)
df$f.price <- cut(df$price, breaks = c(min(df$price), 13994.5  , 19500   , 26499.0 , max(df$price)), labels = c("Low-priced", "Affordable", "Moderately priced", "Expensive"), include.lowest = TRUE)
table(df$f.price)
barplot(summary(df$f.price),main="f.Price Category Barplot",col = "Grey")
# f.Mileage: Usage.
summary(df$mileage)
quantile(df$mileage,seq(0,1,0.25),na.rm=TRUE)
mileage_labels <- c("New/Nearly New", "Used", "Old", "Very Old")
mileage_intervals <- c(min(df$mileage), 5866.5  , 16697.5, 33645.5, max(df$mileage))
df$f.miles <- cut(df$mileage, breaks = mileage_intervals, labels = mileage_labels, include.lowest = TRUE)
table(df$f.miles)
barplot(summary(df$f.miles),main="f.Milage (Usage) Barplot",col = "DarkSlateBlue")
table(df$f.miles,useNA="always")
# f.Tax:
summary(df$tax)
quantile(df$tax,seq(0,1,0.25),na.rm=TRUE)
tax_labels <- c("Low", "Medium", "High")
tax_intervals <- c(min(df$tax), 145, 147.19  , max(df$tax))
df$f.tax <- cut(df$tax, breaks = tax_intervals, labels = tax_labels, include.lowest = TRUE)
barplot(summary(df$f.tax),main="f.Tax Band Barplot",col = "Grey")
# MPG Category: Consumption Category
summary(df$mpg)
quantile(df$mpg,seq(0,1,0.25),na.rm=TRUE)
mpg_labels <- c("Low", "Moderate", "High", "Very High")
mpg_intervals <- c(min(df$mpg), 44.10, 52.30, 60.20, max(df$mpg))
df$f.mpg <- cut(df$mpg, breaks = mpg_intervals, labels = mpg_labels, include.lowest = TRUE)
table(df$f.mpg)
barplot(summary(df$f.mpg),main="f.MPG Barplot - (Consumption) Barplot",col = "Grey")
# Engine Size Category: Small, Medium, Large
summary(df$engineSize)
quantile(df$engineSize,seq(0,1,0.25),na.rm=TRUE)
engineSize_labels <- c("Small", "Medium", "Large")
engineSize_intervals <- c(min(df$engineSize), 1.5, 2.0, max(df$engineSize))
df$f.engineSize <- cut(df$engineSize, breaks = engineSize_intervals, labels = engineSize_labels, include.lowest = TRUE)
barplot(summary(df$f.engineSize),main="f.EngineSize Barplot",col = "Grey")
# Chunk 40
library(FactoMineR)
summary(df$price)
# Binary Target: Audi?
df$Audi<-ifelse(df$manufacturer == "Audi",1,0)
df$Audi<-factor(df$Audi,labels=paste("Audi",c("No","Yes")))
summary(df$Audi)
# Pie
piepercent<-round(100*(table(df$Audi)/nrow(df)),dig=2); piepercent
pie(table(df$Audi),col=heat.colors(2),labels=paste(piepercent,"%"))
legend("topright", levels(df$Audi), cex = 0.8, fill = heat.colors(2))
# Histogram for Price
hist(df$price, main = "Price Distribution", xlab = "Price")
# Chunk 41
res.condes<- condes(df, 3)
res.condes$quanti
# Chunk 42
res.condes$quali
# Chunk 43
df_cat <- as.data.frame(res.condes$category)
df_cat[order(df_cat$Estimate, decreasing = TRUE),]
# Chunk 44
res.catdes <- catdes(df,17,proba = 0.05)
# Chunk 45
res.catdes$quanti.var
# Chunk 46
?
res.input
res.input
X<-imputeMCA(df[,categorical_vars],ncp=7)
X
?fviz_contrib
res.pca
# Chunk 1
library(FactoMineR)
library(car)
library(MVA)
attributes(res.pca$var)
# Target Murder
res.com<-condes(df[,1:4],1)
row.names(df) <- abbreviate(row.names(df),6,method="both.sides")
library(FactoMineR)
library(car)
library(MVA)
df <- USArrests
plot(res.pca, choix="ind")
attributes(res.pca$var)
res.pca_34 <- PCA(df,axes=3:4)
summary(res.pca, nb.dec = 2, ncp = 3, nbelements = 50 )
barplot(res.pca$eig[,1], main="Eigenvalues", names.arg = paste("dim",1:nrow(res.pca$eig)))
attributes(res.pca$var)
cor(df)  # C=ZtZ -  where Z is the original matrix centered and scaled (Normalized PCA)
par(mfrow = c(2, 3))
res.pca <- PCA(df)
res.pca
res.pca_34 <- PCA(df,axes=3:4)
res.pca_34 <- PCA(df,axes=4:5)
res.pca$eig
??condes
c.cr <- princomp(df, cor = TRUE) # =^= prcomp(USArrests, scale=TRUE)
pc.cr <- princomp(df, cor = TRUE) # =^= prcomp(USArrests, scale=TRUE)
summary(pc.cr)
screeplot(pc.cr)
screeplot(pc.cr, type="lines")
## The signs of the columns are arbitrary
plot(pc.cr) # shows a screeplot.
biplot(pc.cr)
pc.cr$loadings  # note that blank entries are small but not zero
pc.cr$scores
barplot(res.pca$eig)
barplot(table(res.pca$eig))
barplot(res.pca$eig[,1])
res.pca$eig
barplot(res.pca$eig[,1], line = TRUE)
